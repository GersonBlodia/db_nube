// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Persona {
  id        Int       @id @default(autoincrement())
  nombre    String
  apellido  String
  dni       String    @unique
  telefono  String?
  correo    String    @unique
  usuario   Usuario?
  empleado  Empleado?
}

model TipoUsuario {
  id        Int       @id @default(autoincrement())
  nombre    String
  usuarios  Usuario[]
}

model Usuario {
  id             Int          @id @default(autoincrement())
  personaId      Int          @unique
  contrasena     String
  tipoUsuarioId  Int
  persona        Persona      @relation(fields: [personaId], references: [id])
  tipoUsuario    TipoUsuario  @relation(fields: [tipoUsuarioId], references: [id])
}

model Empleado {
  id         Int      @id @default(autoincrement())
  personaId  Int      @unique
  cargo      String
  persona    Persona  @relation(fields: [personaId], references: [id])
}

model Proveedor {
  id       Int      @id @default(autoincrement())
  nombre   String
  ruc      String   @unique
  telefono String?
  insumos  Insumo[]
}

model Insumo {
  id           Int         @id @default(autoincrement())
  nombre       String
  stock        Int
  unidad       String
  proveedorId  Int
  proveedor    Proveedor   @relation(fields: [proveedorId], references: [id])
  ingredientes Ingrediente[]
}

model Ingrediente {
  id        Int      @id @default(autoincrement())
  insumoId  Int
  platoId   Int
  cantidad  Float
  insumo    Insumo   @relation(fields: [insumoId], references: [id])
  plato     Plato    @relation(fields: [platoId], references: [id])
}

model Plato {
  id           Int           @id @default(autoincrement())
  nombre       String
  descripcion  String?
  precio       Float
  disponible   Boolean       @default(true)
  ingredientes Ingrediente[]
  ordenes      Orden[]
  ofertas      Oferta[]
}

model Oferta {
  id        Int     @id @default(autoincrement())
  platoId   Int
  nombre    String
  descuento Float   // % de descuento
  activo    Boolean @default(true)
  plato     Plato   @relation(fields: [platoId], references: [id])
}

model Pedido {
  id         Int       @id @default(autoincrement())
  fecha      DateTime  @default(now())
  mesa       String?
  estado     String    @default("pendiente") // pendiente, atendido, cancelado
  ordenes    Orden[]
}

model Orden {
  id         Int      @id @default(autoincrement())
  pedidoId   Int
  platoId    Int
  cantidad   Int
  subtotal   Float
  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  plato      Plato    @relation(fields: [platoId], references: [id])
  venta      Venta?
}

model Venta {
  id              Int       @id @default(autoincrement())
  ordenId         Int       @unique
  fecha           DateTime  @default(now())
  montoTotal      Float
  metodoPagoId    Int
  boleta          Boleta?
  factura         Factura?
  metodoPago      MetodoPago @relation(fields: [metodoPagoId], references: [id])
  orden           Orden      @relation(fields: [ordenId], references: [id])
}

model MetodoPago {
  id     Int     @id @default(autoincrement())
  nombre String
  ventas Venta[]
}

model Boleta {
  id       Int   @id @default(autoincrement())
  ventaId  Int   @unique
  venta    Venta @relation(fields: [ventaId], references: [id])
}

model Factura {
  id       Int   @id @default(autoincrement())
  ventaId  Int   @unique
  ruc      String
  razonSocial String
  venta    Venta @relation(fields: [ventaId], references: [id])
}
